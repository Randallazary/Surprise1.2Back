generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  id                             Int        @id @default(autoincrement())
  userId                         Int        @unique(map: "userId")
  createdAt                      DateTime?  @default(now()) @db.DateTime(0)
  updatedAt                      DateTime?  @default(now()) @db.DateTime(0)
  usuarios_cart_userIdTousuarios usuarios   @relation("cart_userIdTousuarios", fields: [userId], references: [id], onUpdate: Restrict, map: "fk_cart_user")
  cartitem                       cartitem[]
  usuarios_usuarios_cartIdTocart usuarios?  @relation("usuarios_cartIdTocart")
}

model cartitem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int?      @default(1)
  addedAt   DateTime? @default(now()) @db.DateTime(0)
  cart      cart      @relation(fields: [cartId], references: [id], onUpdate: Restrict, map: "fk_cartitem_cart")
  productos productos @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "fk_cartitem_producto")

  @@unique([cartId, productId], map: "unique_cart_product")
  @@index([productId], map: "fk_cartitem_producto")
}

model deslindederesponsabilidad {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(255)
  content       String    @db.Text
  effectiveDate DateTime  @db.DateTime(0)
  isCurrent     Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @default(now()) @db.DateTime(0)
}

model direccion {
  id       Int       @id @default(autoincrement())
  calle    String    @db.VarChar(255)
  numero   String    @db.VarChar(50)
  ciudad   String    @db.VarChar(100)
  estado   String    @db.VarChar(100)
  pais     String    @db.VarChar(100)
  cp       String    @db.VarChar(20)
  userId   Int?
  usuarios usuarios? @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_direccion_usuario")
  pedido   pedido[]

  @@index([userId], map: "fk_direccion_usuario")
}

model imagenes {
  id        Int       @id @default(autoincrement())
  url       String    @db.VarChar(500)
  productId Int
  productos productos @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "fk_imagen_producto")

  @@index([productId], map: "fk_imagen_producto")
}

model loginhistory {
  id        Int       @id @default(autoincrement())
  loginDate DateTime? @default(now()) @db.DateTime(0)
  userId    Int
  usuarios  usuarios  @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "fk_loginhistory_user")

  @@index([userId], map: "fk_loginhistory_user")
}

model logos {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(500)
  fechaSubida DateTime? @default(now()) @db.DateTime(0)
  autor       String    @db.VarChar(255)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
}

model pedido {
  id          Int            @id @default(autoincrement())
  clienteId   Int
  direccionId Int
  estado      pedido_estado? @default(EN_PROCESO)
  total       Float          @db.Float
  createdAt   DateTime?      @default(now()) @db.DateTime(0)
  updatedAt   DateTime?      @default(now()) @db.DateTime(0)
  usuarios    usuarios       @relation(fields: [clienteId], references: [id], onUpdate: Restrict, map: "fk_pedido_cliente")
  direccion   direccion      @relation(fields: [direccionId], references: [id], onUpdate: Restrict, map: "fk_pedido_direccion")
  pedidoitem  pedidoitem[]

  @@index([clienteId], map: "fk_pedido_cliente")
  @@index([direccionId], map: "fk_pedido_direccion")
}

model pedidoitem {
  id             Int       @id @default(autoincrement())
  pedidoId       Int
  productoId     Int
  cantidad       Int
  precioUnitario Float     @db.Float
  subtotal       Float     @db.Float
  pedido         pedido    @relation(fields: [pedidoId], references: [id], onUpdate: Restrict, map: "fk_pedidoitem_pedido")
  productos      productos @relation(fields: [productoId], references: [id], onUpdate: Restrict, map: "fk_pedidoitem_producto")

  @@index([pedidoId], map: "fk_pedidoitem_pedido")
  @@index([productoId], map: "fk_pedidoitem_producto")
}

model politicasdeprivacidad {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(255)
  content       String    @db.Text
  effectiveDate DateTime  @db.DateTime(0)
  isCurrent     Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @default(now()) @db.DateTime(0)
}

model productos {
  id          Int          @id @default(autoincrement())
  NAME        String       @db.VarChar(255)
  description String       @db.Text
  price       Float?       @default(0) @db.Float
  stock       Int?         @default(0)
  category    String       @db.VarChar(100)
  ocasion     String?      @db.VarChar(100)
  discount    Float?       @default(0) @db.Float
  createdAt   DateTime?    @default(now()) @db.DateTime(0)
  updatedAt   DateTime?    @default(now()) @db.DateTime(0)
  cartitem    cartitem[]
  imagenes    imagenes[]
  pedidoitem  pedidoitem[]
  sales       sales[]
}

model sales {
  id         Int       @id @default(autoincrement())
  productId  Int
  quantity   Int?      @default(1)
  salePrice  Float     @db.Float
  total      Float     @db.Float
  saleDate   DateTime? @default(now()) @db.DateTime(0)
  customerId Int?
  productos  productos @relation(fields: [productId], references: [id], onUpdate: Restrict, map: "fk_sales_producto")

  @@index([productId], map: "fk_sales_producto")
}

model terminosycondiciones {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(255)
  content       String    @db.Text
  effectiveDate DateTime  @db.DateTime(0)
  isCurrent     Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @default(now()) @db.DateTime(0)
}

model usuarios {
  id                         Int            @id @default(autoincrement())
  NAME                       String         @db.VarChar(255)
  lastname                   String         @db.VarChar(255)
  email                      String         @unique(map: "email") @db.VarChar(255)
  telefono                   String         @db.VarChar(50)
  USER                       String         @db.VarChar(100)
  preguntaSecreta            String         @db.VarChar(255)
  respuestaSecreta           String         @db.VarChar(255)
  PASSWORD                   String         @db.VarChar(255)
  codigo_acceso              String         @unique(map: "codigo_acceso") @db.VarChar(255)
  verified                   Boolean?       @default(false)
  role                       String?        @default("normal") @db.VarChar(50)
  failedLoginAttempts        Int?           @default(0)
  lockedUntil                DateTime?      @db.DateTime(0)
  blocked                    Boolean?       @default(false)
  lockCount                  Int?           @default(0)
  lastLogin                  DateTime?      @db.DateTime(0)
  createdAt                  DateTime?      @default(now()) @db.DateTime(0)
  updatedAt                  DateTime?      @default(now()) @db.DateTime(0)
  cartId                     Int?           @unique(map: "cartId")
  cart_cart_userIdTousuarios cart?          @relation("cart_userIdTousuarios")
  direccion                  direccion[]
  loginhistory               loginhistory[]
  pedido                     pedido[]
  cart_usuarios_cartIdTocart cart?          @relation("usuarios_cartIdTocart", fields: [cartId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_usuarios_cart")
}

enum pedido_estado {
  EN_PROCESO
  EN_CAMINO
  ENTREGADO
  CANCELADO
  COMPLETADO
}
