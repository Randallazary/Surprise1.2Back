datasource db {
  provider = "mysql"  // Cambiado de sqlserver a mysql
  url      = env("DATABASE_URL")  // Asegúrate de que tu .env apunte a MySQL
}

generator client {
  provider = "prisma-client-js"
}

model Usuarios {
  id                  Int             @id @default(autoincrement())
  name                String
  lastname            String
  email               String          @unique
  telefono            String
  user                String
  preguntaSecreta     String
  respuestaSecreta    String
  password            String
  verified            Boolean         @default(false)
  role                String          @default("normal")
  failedLoginAttempts Int             @default(0)
  lockedUntil         DateTime?
  blocked             Boolean         @default(false)
  lockCount           Int             @default(0)
  lastLogin           DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  cart    Cart?   @relation(fields: [cartId], references: [id])
  cartId  Int?    @unique
  loginHistories      LoginHistory[]
  pedidos Pedido[]
 
  direcciones  Direccion[]  // Relación inversa
}

model LoginHistory {
  id         Int       @id @default(autoincrement())
  loginDate  DateTime  @default(now())
  userId     Int
  usuarios   Usuarios  @relation(fields: [userId], references: [id])
}

model Productos {
  id           Int           @id @default(autoincrement())
  name         String        // MySQL no necesita @db.VarChar, usa String directamente
  description  String
  price        Float         @default(0)
  stock        Int           @default(0)
  category     String
  ocasion      String?      
  discount     Float?        @default(0)
  images       Imagenes[]
  sales        Sales[]
  cartItems    CartItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  pedidoItems PedidoItem[]
 
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  usuarios  Usuarios?
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      Int
  product     Productos @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int       @default(1)
  addedAt     DateTime  @default(now())
  @@unique([cartId, productId])
}

model Imagenes {
  id         Int       @id @default(autoincrement())
  url        String
  productId  Int
  producto   Productos @relation(fields: [productId], references: [id])
}

model Sales {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Productos @relation(fields: [productId], references: [id])
  quantity    Int       @default(1)
  salePrice   Float
  total       Float
  saleDate    DateTime  @default(now())
  customerId  Int?
}

model Logos {
  id          Int      @id @default(autoincrement())
  url         String
  fechaSubida DateTime @default(now())
  autor       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TerminosYCondiciones {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  effectiveDate DateTime
  isCurrent     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PoliticasDePrivacidad {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  effectiveDate DateTime
  isCurrent     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DeslindeDeResponsabilidad {
  id            Int      @id @default(autoincrement())
  title         String
  content       String
  effectiveDate DateTime
  isCurrent     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Pedido {
  id           Int           @id @default(autoincrement())
  clienteId    Int
  direccionId  Int           // ← NUEVO
  estado       EstadoPedido  @default(EN_PROCESO)
  total        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  cliente      Usuarios      @relation(fields: [clienteId], references: [id])
  direccion    Direccion     @relation(fields: [direccionId], references: [id])
  items        PedidoItem[]
}

model PedidoItem {
  id           Int       @id @default(autoincrement())
  pedido       Pedido    @relation(fields: [pedidoId], references: [id])
  pedidoId     Int
  producto     Productos @relation(fields: [productoId], references: [id])
  productoId   Int
  cantidad     Int
  precioUnitario Float   // Precio del producto al momento de la compra
  subtotal       Float   // precioUnitario * cantidad
}

enum EstadoPedido {
  EN_PROCESO
  EN_CAMINO
  ENTREGADO
}

model Direccion {
  id        Int       @id @default(autoincrement())
  calle     String
  numero    String
  ciudad    String
  estado    String
  pais      String
  cp        String
  user      Usuarios? @relation(fields: [userId], references: [id])
  userId    Int?
  pedidos   Pedido[]
}